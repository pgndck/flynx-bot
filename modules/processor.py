import aiofiles
import logging
import os

from typing import Any, Dict

from aiogram import Bot, Dispatcher, F, Router
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from urllib.parse import urlparse

from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from modules.logger import logger
from modules.settings import Settings


class States(StatesGroup):
    regular_usage = State()
    user_contact = State()
    send_link = State()
    send_text = State()
    main_menu = State()


def simple_keyboard(options):
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=option) for option in options],
        ],
        resize_keyboard=True,
    )


router = Router()

bot = Bot(token=Settings.TELEGRAM_BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()
dp.include_router(Router())


class Processor:
    async def run(self):
        global bot
        global dp

        dp.include_router(router)

        await dp.start_polling(bot)


@router.message(CommandStart())
async def command_start(message: Message, state: FSMContext) -> None:
    await state.set_state(States.user_contact)
    await message.answer("–π–æ –π–æ –π–æ, —Ç–∏ —Ç—É—Ç —â–æ–± –∑–≤ º—è–∑–∞—Ç–∏—Å—å –∑ –Ω–∞–º–∏?")
    await message.answer("—Ç–æ —Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –º—ñ—Å—Ü—ñ!")
    await message.answer(
        "–¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ –¥–∞—é —Ç–æ–±—ñ –º–µ–Ω—é—à–∫—É üßú‚Äç‚ôÄÔ∏è",
        reply_markup=simple_keyboard(
            ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
        ),
        parse_mode=ParseMode.HTML,
    )


@router.message((F.from_user.id in Settings.ADMINS) & (F.text.casefold() == "/admin"))
async def admin(message: Message, state: FSMContext) -> None:
    await state.set_state(States.user_contact)
    await message.answer("–∞ —è —Ç–µ–±–µ –∑–Ω–∞—é")
    await message.answer("—Ç–∏ —Ç—É—Ç –∞–¥–º—ñ–Ω–æ–º –ø—Ä–∞—Ü—é—î—à")
    await message.answer("–∑–∞—Ä–∞–∑ —Ç—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î, –∞–ª–µ —Ç—É—Ç —Å–∫–æ—Ä–æ –±—É–¥–µ –∞–¥–º—ñ–Ω–∫–∞!")
    await message.answer(
        "–∞ –ø–æ–∫–∏ —â–æ –ø–∏–∑–¥—É–π –≤ –º–µ–Ω—é",
        reply_markup=simple_keyboard(
            ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
        ),
        parse_mode=ParseMode.HTML,
    )


@router.message(Command("help"))
@router.message(F.text.casefold() == "/help")
async def help(message: Message, state: FSMContext) -> None:
    """
    Handle the command to display the help message.
    """
    logger.info(message)

    await message.answer("–≤—ñ—É –≤—ñ—É –≤—ñ—É üöë")
    await message.answer("—Ü–µ –¥—É–∂–µ –º–∞–ª–µ–Ω—å–∫–∏–π –±–æ—Ç, —Ç–æ–º—É –≤ –¥–æ–ø–æ–º–æ–∑—ñ –Ω—ñ—á–æ–≥–æ –Ω–µ–º–∞—î")
    await message.answer(
        "—Å–æ—Ä—è–º–±–∞ üåà",
        reply_markup=simple_keyboard(
            ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
        ),
        parse_mode=ParseMode.HTML,
    )

    await state.set_state(States.user_contact)


@router.message(States.user_contact)
async def user_contact(message: Message, state: FSMContext) -> None:
    next_state = {
        "–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±": States.send_link,
        "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏": States.send_text,
    }.get(message.text, None)

    if next_state:
        await state.set_state(next_state)

        if message.text == "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏":
            await message.reply(
                "–±—É–¥—å –ª–∞—Å–∫–∞, –ø–∏—à–∏ —Å—é–¥–∏ –≤—Å—ñ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏, –∑–∞—É–≤–∞–∂–µ–Ω–Ω—è, –≤–∑–∞–≥–∞–ª—ñ –≤—Å–µ —â–æ –º–æ–∂–Ω–∞!",
                reply_markup=ReplyKeyboardRemove(),
            )
            await message.answer("–º–æ–∂–µ—à —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ —Ç—É—Ç –ø—Ä–æ –ø–æ–¥—ñ—é, –∞–±–æ —â–µ —â–æ—Å—å —Ü—ñ–∫–∞–≤–µ")
            await message.answer("—Ç—ñ–ª—å–∫–∏ —â–æ–± —Ü–µ –±—É–ª–æ –æ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ–∫–µ–π? üßú‚Äç‚ôÄÔ∏è")
            await message.answer("—Ü–µ —è –º–æ–∂—É –ø–∏—Å–∞—Ç–∏ –±–∞–≥–∞—Ç–æ")
            await message.answer("–∞ —Ç–∏")
            await message.answer("–Ω—ñ")
            await message.answer("üßú‚Äç‚ôÄÔ∏è")
            await message.answer(
                "(–ø—Ä–∞–≤–¥–∞, –æ–±–º–µ–∂—Å—è –æ–¥–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º, –±–æ –¥–∞–ª—ñ —Ç–µ–±–µ –ø–æ–≤–µ—Ä–Ω–µ –≤ –º–µ–Ω—é)"
            )
        elif message.text == "–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±":
            await message.answer(
                "–æ–∫–µ–π, —á–µ–∫–∞—é –Ω–∞ –ª—ñ–Ω–∫—É! —ñ –∫—Ä–∞—â–µ –± —ó–π –±—É—Ç–∏ –ø—Ä–∏–∫–æ–ª—å–Ω–æ—é... üßú‚Äç‚ôÄÔ∏è",
                reply_markup=ReplyKeyboardRemove(),
            )
    else:
        await state.set_state(States.user_contact)

        await message.reply(
            "–æ–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –º–∞–±—É—Ç—å —Ö—Ç–æ—Å—å –ª—é–±–∏—Ç—å –ø–∏—Å–∞—Ç–∏ –≤—ñ–¥ —Å–µ–±–µ –∞ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –∫–Ω–æ–ø–æ—á–∫–∏?"
        )
        await message.answer("–∞ —Ç–µ–ø–µ—Ä –≤—Å–µ –∑–∞–Ω–æ–≤–æ...")
        await message.answer(
            "... —ñ –æ—Å—å –º–µ–Ω—é—à–∫–∞ üßú‚Äç‚ôÄÔ∏è",
            reply_markup=simple_keyboard(
                ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
            ),
            parse_mode=ParseMode.HTML,
        )


@router.message(States.send_link)
async def send_link(message: Message, state: FSMContext) -> None:
    await state.set_state(States.user_contact)

    if message.text != "wrong link":
        # TODO: check facebook links

        await message.reply("–æ–π —è–∫–∞ –ø–æ–¥—ñ—è, –ø—Ä–æ—Å—Ç–æ –∫—Ä–∞—Å–∞!")
        await message.answer("(—è —Ç–∞–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é –Ω–∞ –≤—Å—ñ –ø–æ–¥—ñ—ó, —Å–æ—Ä—ñ –Ω–æ—Ç —Å–æ—Ä—ñ)")
        await message.answer(
            "–∞–ª–µ –¥—É–∂–µ –¥—è–∫—É—é! –º–æ—ó –∫–ª—å–æ–≤—ñ –∞–¥–º—ñ–Ω–∏ –ø–æ–¥–∏–≤–ª—è—Ç—å—Å—è –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ üßú‚Äç‚ôÄÔ∏è"
        )
        await message.answer(
            "—Ç—É—Ç –±—ñ–ª—å—à–µ –Ω–µ–º–∞ —á–æ–≥–æ —Ä–æ–±–∏—Ç–∏... —Ç–æ–º—É –æ—Å—å –º–µ–Ω—é—à–∫–∞!",
            reply_markup=simple_keyboard(
                ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
            ),
            parse_mode=ParseMode.HTML,
        )
    else:
        await message.reply("–∑–¥–∞—î—Ç—å—Å—è –º–µ–Ω—ñ, —â–æ —Ü–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ä–æ–±–æ—á–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–¥—ñ—é")
        await message.answer("–±—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤–æ–Ω–æ –≤–∏–≥–ª—è–¥–∞—î –ø—Ä–∏–±–ª–∏–∑–Ω–æ —Ç–∞–∫:")
        await message.answer("https://www.facebook.com/events/12345678/")
        await message.answer("–∞–±–æ —Ç–∞–∫: https://facebook.com/events/12345678/")
        await message.answer("–∞–±–æ –Ω–∞–≤—ñ—Ç—å —Ç–∞–∫: facebook.com/events/12345678/")
        await message.answer(
            "–∞ –≤ –ø–æ–∫–∞—Ä–∞–Ω–Ω—è –º–∏ —Ç–µ–±–µ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤ –º–µ–Ω—é!",
            reply_markup=simple_keyboard(
                ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
            ),
            parse_mode=ParseMode.HTML,
        )


@router.message(States.send_text)
async def send_text(message: Message, state: FSMContext) -> None:
    # global bot

    await state.set_state(States.user_contact)

    if message.photo:
        await bot.send_photo(
            chat_id=Settings.ADMIN_GROUP,
            photo=message.photo[-1].file_id,
            caption=get_text_for_admins(message),
        )
    elif message.audio:
        await bot.send_audio(
            chat_id=Settings.ADMIN_GROUP,
            audio=message.audio.file_id,
            caption=get_text_for_admins(message),
        )
    elif message.video:
        await bot.send_video(
            chat_id=Settings.ADMIN_GROUP,
            video=message.video.file_id,
            caption=get_text_for_admins(message),
        )
    elif message.voice:
        await bot.send_message(
            chat_id=Settings.ADMIN_GROUP, text=get_text_for_admins(message)
        )
        await bot.send_voice(
            chat_id=Settings.ADMIN_GROUP,
            voice=message.voice.file_id,
        )
    elif message.video_note:
        await bot.send_message(
            chat_id=Settings.ADMIN_GROUP, text=get_text_for_admins(message)
        )
        await bot.send_video_note(
            chat_id=Settings.ADMIN_GROUP, video_note=message.video_note.file_id
        )
    elif message.sticker:
        await bot.send_message(
            chat_id=Settings.ADMIN_GROUP, text=get_text_for_admins(message)
        )
        await bot.send_sticker(
            chat_id=Settings.ADMIN_GROUP, sticker=message.sticker.file_id
        )
    else:
        await bot.send_message(
            chat_id=Settings.ADMIN_GROUP, text=get_text_for_admins(message)
        )

    await message.answer("–≤–∞—É, —è–∫–∏–π —Ç–µ–∫—Å—Ç! –æ–≥–æ–≥–æ!")
    await message.answer("(—è –Ω–µ –∑–Ω–∞—é —â–æ —Ç–∞–º, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω–µ —Ç–∞–∫ –∑–∞–ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–ª–∏)")
    await message.answer(
        "–º–æ—ó –ª—é–¥–∏–Ω–æ–¥—Ä—É–∑—ñ –ø–æ–¥–∏–≤–ª—è—Ç—å—Å—è —â–æ —Ç–∞–º –≤—ñ–¥ —Ç–µ–±–µ –ø—Ä–∏–π—à–ª–æ, –∞ –∑–∞—Ä–∞–∑..... –º–µ–Ω—é—à–∫–∞!",
        reply_markup=simple_keyboard(
            ["–¥–∞—Ç–∏ –ª—ñ–Ω–∫ –Ω–∞ –ø–æ–¥—ñ—é –Ω–∞ —Ñ–±", "–Ω–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–º —Å–≤–æ—ó–º–∏ —Å–ª–æ–≤–∞–º–∏"]
        ),
        parse_mode=ParseMode.HTML,
    )


def get_text_for_admins(message):
    return (
        f"üåà —É–≤–∞–≥–∞! —É–≤–∞–≥–∞! üåà\n"
        f"–ø—ñ—Å—å–º–æ –≤—ñ–¥ @{message.from_user.username}:\n"
        f"==========\n"
        f"{message.text if message.text else ''}"
        f"{message.caption if message.caption else ''}"
    )
